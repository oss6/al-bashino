#!/usr/bin/env bash

# ##################################################
#
version="1.0.0"
#
# HISTORY:
#
# * DATE - v1.0.0  - Initial commit
#
# ##################################################

scriptName=$(basename "$0")

function safeExit() {
    # safeExit
    # -----------------------------------
    # Non destructive exit for when script exits naturally.
    # -----------------------------------

    trap - INT TERM EXIT
    exit
}

# Options and Usage
# -----------------------------------
# Print usage
usage() {
    echo -n "${scriptName} [OPTION]...

Create a permanent alias in .bashrc

 Options:
  --[alias_name]=[command]
  -h, --help        Display this help and exit
      --version     Output version information and exit
"
}

# Iterate over options breaking -ab into -a -b when needed and --foo=bar into
# --foo bar
optstring=h
unset options
while (($#)); do
  case $1 in
    # If option is of type -ab
    -[!-]?*)
      # Loop over each character starting with the second
      for ((i=1; i < ${#1}; i++)); do
        c=${1:i:1}

        # Add current char to options
        options+=("-$c")

        # If option takes a required argument, and it's not the last char make
        # the rest of the string its argument
        if [[ $optstring = *"$c:"* && ${1:i+1} ]]; then
          options+=("${1:i+1}")
          break
        fi
      done
      ;;

    # If option is of type --foo=bar
    --?*=*) options+=("${1%%=*}" "${1#*=}") ;;
    # add --endopts for --
    --) options+=(--endopts) ;;
    # Otherwise, nothing special
    *) options+=("$1") ;;
  esac
  shift
done
set -- "${options[@]}"
unset options

# Read the options
keys=()
values=()

while [[ $1 = -?* ]]; do
    case $1 in
	-h|--help) usage >&2; safeExit ;;
	--version) echo "$(basename $0) ${version}"; safeExit ;;
	--endopts) shift; break ;;
	*) keys+=("${1#--}"); shift; values+=("'$1'") ;;
    esac
    shift
done

# Set IFS to preferred implementation
IFS=$' \n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Bash will remember & return the highest exitcode in a chain of pipes.
set -o pipefail

# Run your script
for ((i=0; i < ${#keys[@]}; i++)); do
    echo "alias ${keys[i]}=${values[i]}" >> ~/.bash_aliases
done

# Exit cleanly
safeExit
